/**
 * common_transparent_type.java
 *
 * This file was generated by XMLSpy 2007sp2 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSpy Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.jmex.model.collada.schema;


public class common_transparent_type extends common_color_or_texture_type {

	public common_transparent_type(common_transparent_type node) {
		super(node);
	}

	public common_transparent_type(org.w3c.dom.Node node) {
		super(node);
	}

	public common_transparent_type(org.w3c.dom.Document doc) {
		super(doc);
	}

	public common_transparent_type(com.jmex.xml.xml.Document doc, String namespaceURI, String prefix, String name) {
		super(doc, namespaceURI, prefix, name);
	}
	
	public void adjustPrefix() {
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "opaque" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "opaque", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}

		super.adjustPrefix();
	}
	public void setXsiType() {
 		org.w3c.dom.Element el = (org.w3c.dom.Element) domNode;
		el.setAttributeNS("http://www.w3.org/2001/XMLSchema-instance", "xsi:type", "common_transparent_type");
	}

	public static int getopaqueMinCount() {
		return 0;
	}

	public static int getopaqueMaxCount() {
		return 1;
	}

	public int getopaqueCount() {
		return getDomChildCount(Attribute, null, "opaque");
	}

	public boolean hasopaque() {
		return hasDomChild(Attribute, null, "opaque");
	}

	public fx_opaque_enum newopaque() {
		return new fx_opaque_enum();
	}

	public fx_opaque_enum getopaqueAt(int index) throws Exception {
		return new fx_opaque_enum(getDomNodeValue(getDomChildAt(Attribute, null, "opaque", index)));
	}

	public org.w3c.dom.Node getStartingopaqueCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "opaque" );
	}

	public org.w3c.dom.Node getAdvancedopaqueCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "opaque", curNode );
	}

	public fx_opaque_enum getopaqueValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.jmex.xml.xml.XmlException("Out of range");
		else
			return new fx_opaque_enum(getDomNodeValue(curNode));
	}

	public fx_opaque_enum getopaque() throws Exception 
 {
		return getopaqueAt(0);
	}

	public void removeopaqueAt(int index) {
		removeDomChildAt(Attribute, null, "opaque", index);
	}

	public void removeopaque() {
		removeopaqueAt(0);
	}

	public org.w3c.dom.Node addopaque(fx_opaque_enum value) {
		if( value.isNull() )
			return null;

		return  appendDomChild(Attribute, null, "opaque", value.toString());
	}

	public org.w3c.dom.Node addopaque(String value) throws Exception {
		return addopaque(new fx_opaque_enum(value));
	}

	public void insertopaqueAt(fx_opaque_enum value, int index) {
		insertDomChildAt(Attribute, null, "opaque", index, value.toString());
	}

	public void insertopaqueAt(String value, int index) throws Exception {
		insertopaqueAt(new fx_opaque_enum(value), index);
	}

	public void replaceopaqueAt(fx_opaque_enum value, int index) {
		replaceDomChildAt(Attribute, null, "opaque", index, value.toString());
	}

	public void replaceopaqueAt(String value, int index) throws Exception {
		replaceopaqueAt(new fx_opaque_enum(value), index);
	}

}
