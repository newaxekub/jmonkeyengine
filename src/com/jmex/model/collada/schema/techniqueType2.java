/**
 * techniqueType2.java
 *
 * This file was generated by XMLSpy 2007sp2 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSpy Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.jmex.model.collada.schema;

import com.jmex.xml.types.SchemaID;
import com.jmex.xml.types.SchemaNCName;

public class techniqueType2 extends com.jmex.xml.xml.Node {

	public techniqueType2(techniqueType2 node) {
		super(node);
	}

	public techniqueType2(org.w3c.dom.Node node) {
		super(node);
	}

	public techniqueType2(org.w3c.dom.Document doc) {
		super(doc);
	}

	public techniqueType2(com.jmex.xml.xml.Document doc, String namespaceURI, String prefix, String name) {
		super(doc, namespaceURI, prefix, name);
	}
	
	public void adjustPrefix() {
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "id" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "id", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "sid" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "sid", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, "http://www.collada.org/2005/11/COLLADASchema", "asset" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, "http://www.collada.org/2005/11/COLLADASchema", "asset", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, true);
			new assetType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, "http://www.collada.org/2005/11/COLLADASchema", "image" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, "http://www.collada.org/2005/11/COLLADASchema", "image", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, true);
			new imageType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, "http://www.collada.org/2005/11/COLLADASchema", "newparam" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, "http://www.collada.org/2005/11/COLLADASchema", "newparam", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, true);
			new common_newparam_type(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, "http://www.collada.org/2005/11/COLLADASchema", "constant" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, "http://www.collada.org/2005/11/COLLADASchema", "constant", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, true);
			new constantType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, "http://www.collada.org/2005/11/COLLADASchema", "lambert" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, "http://www.collada.org/2005/11/COLLADASchema", "lambert", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, true);
			new lambertType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, "http://www.collada.org/2005/11/COLLADASchema", "phong" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, "http://www.collada.org/2005/11/COLLADASchema", "phong", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, true);
			new phongType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, "http://www.collada.org/2005/11/COLLADASchema", "blinn" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, "http://www.collada.org/2005/11/COLLADASchema", "blinn", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, true);
			new blinnType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, "http://www.collada.org/2005/11/COLLADASchema", "extra" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, "http://www.collada.org/2005/11/COLLADASchema", "extra", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, true);
			new extraType(tmpNode).adjustPrefix();
		}
	}
	public void setXsiType() {
 		org.w3c.dom.Element el = (org.w3c.dom.Element) domNode;
		el.setAttributeNS("http://www.w3.org/2001/XMLSchema-instance", "xsi:type", "technique");
	}

	public static int getidMinCount() {
		return 0;
	}

	public static int getidMaxCount() {
		return 1;
	}

	public int getidCount() {
		return getDomChildCount(Attribute, null, "id");
	}

	public boolean hasid() {
		return hasDomChild(Attribute, null, "id");
	}

	public SchemaID newid() {
		return new SchemaID();
	}

	public SchemaID getidAt(int index) throws Exception {
		return new SchemaID(getDomNodeValue(getDomChildAt(Attribute, null, "id", index)));
	}

	public org.w3c.dom.Node getStartingidCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "id" );
	}

	public org.w3c.dom.Node getAdvancedidCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "id", curNode );
	}

	public SchemaID getidValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.jmex.xml.xml.XmlException("Out of range");
		else
			return new SchemaID(getDomNodeValue(curNode));
	}

	public SchemaID getid() throws Exception 
 {
		return getidAt(0);
	}

	public void removeidAt(int index) {
		removeDomChildAt(Attribute, null, "id", index);
	}

	public void removeid() {
		removeidAt(0);
	}

	public org.w3c.dom.Node addid(SchemaID value) {
		if( value.isNull() )
			return null;

		return  appendDomChild(Attribute, null, "id", value.toString());
	}

	public org.w3c.dom.Node addid(String value) throws Exception {
		return addid(new SchemaID(value));
	}

	public void insertidAt(SchemaID value, int index) {
		insertDomChildAt(Attribute, null, "id", index, value.toString());
	}

	public void insertidAt(String value, int index) throws Exception {
		insertidAt(new SchemaID(value), index);
	}

	public void replaceidAt(SchemaID value, int index) {
		replaceDomChildAt(Attribute, null, "id", index, value.toString());
	}

	public void replaceidAt(String value, int index) throws Exception {
		replaceidAt(new SchemaID(value), index);
	}

	public static int getsidMinCount() {
		return 1;
	}

	public static int getsidMaxCount() {
		return 1;
	}

	public int getsidCount() {
		return getDomChildCount(Attribute, null, "sid");
	}

	public boolean hassid() {
		return hasDomChild(Attribute, null, "sid");
	}

	public SchemaNCName newsid() {
		return new SchemaNCName();
	}

	public SchemaNCName getsidAt(int index) throws Exception {
		return new SchemaNCName(getDomNodeValue(getDomChildAt(Attribute, null, "sid", index)));
	}

	public org.w3c.dom.Node getStartingsidCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "sid" );
	}

	public org.w3c.dom.Node getAdvancedsidCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "sid", curNode );
	}

	public SchemaNCName getsidValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.jmex.xml.xml.XmlException("Out of range");
		else
			return new SchemaNCName(getDomNodeValue(curNode));
	}

	public SchemaNCName getsid() throws Exception 
 {
		return getsidAt(0);
	}

	public void removesidAt(int index) {
		removeDomChildAt(Attribute, null, "sid", index);
	}

	public void removesid() {
		removesidAt(0);
	}

	public org.w3c.dom.Node addsid(SchemaNCName value) {
		if( value.isNull() )
			return null;

		return  appendDomChild(Attribute, null, "sid", value.toString());
	}

	public org.w3c.dom.Node addsid(String value) throws Exception {
		return addsid(new SchemaNCName(value));
	}

	public void insertsidAt(SchemaNCName value, int index) {
		insertDomChildAt(Attribute, null, "sid", index, value.toString());
	}

	public void insertsidAt(String value, int index) throws Exception {
		insertsidAt(new SchemaNCName(value), index);
	}

	public void replacesidAt(SchemaNCName value, int index) {
		replaceDomChildAt(Attribute, null, "sid", index, value.toString());
	}

	public void replacesidAt(String value, int index) throws Exception {
		replacesidAt(new SchemaNCName(value), index);
	}

	public static int getassetMinCount() {
		return 0;
	}

	public static int getassetMaxCount() {
		return 1;
	}

	public int getassetCount() {
		return getDomChildCount(Element, "http://www.collada.org/2005/11/COLLADASchema", "asset");
	}

	public boolean hasasset() {
		return hasDomChild(Element, "http://www.collada.org/2005/11/COLLADASchema", "asset");
	}

	public assetType newasset() {
		return new assetType(domNode.getOwnerDocument().createElementNS("http://www.collada.org/2005/11/COLLADASchema", "asset"));
	}

	public assetType getassetAt(int index) throws Exception {
		return new assetType(getDomChildAt(Element, "http://www.collada.org/2005/11/COLLADASchema", "asset", index));
	}

	public org.w3c.dom.Node getStartingassetCursor() throws Exception {
		return getDomFirstChild(Element, "http://www.collada.org/2005/11/COLLADASchema", "asset" );
	}

	public org.w3c.dom.Node getAdvancedassetCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, "http://www.collada.org/2005/11/COLLADASchema", "asset", curNode );
	}

	public assetType getassetValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.jmex.xml.xml.XmlException("Out of range");
		else
			return new assetType(curNode);
	}

	public assetType getasset() throws Exception 
 {
		return getassetAt(0);
	}

	public void removeassetAt(int index) {
		removeDomChildAt(Element, "http://www.collada.org/2005/11/COLLADASchema", "asset", index);
	}

	public void removeasset() {
		removeassetAt(0);
	}

	public org.w3c.dom.Node addasset(assetType value) {
		return appendDomElement("http://www.collada.org/2005/11/COLLADASchema", "asset", value);
	}

	public void insertassetAt(assetType value, int index) {
		insertDomElementAt("http://www.collada.org/2005/11/COLLADASchema", "asset", index, value);
	}

	public void replaceassetAt(assetType value, int index) {
		replaceDomElementAt("http://www.collada.org/2005/11/COLLADASchema", "asset", index, value);
	}

	public static int getimageMinCount() {
		return 1;
	}

	public static int getimageMaxCount() {
		return 1;
	}

	public int getimageCount() {
		return getDomChildCount(Element, "http://www.collada.org/2005/11/COLLADASchema", "image");
	}

	public boolean hasimage() {
		return hasDomChild(Element, "http://www.collada.org/2005/11/COLLADASchema", "image");
	}

	public imageType newimage() {
		return new imageType(domNode.getOwnerDocument().createElementNS("http://www.collada.org/2005/11/COLLADASchema", "image"));
	}

	public imageType getimageAt(int index) throws Exception {
		return new imageType(getDomChildAt(Element, "http://www.collada.org/2005/11/COLLADASchema", "image", index));
	}

	public org.w3c.dom.Node getStartingimageCursor() throws Exception {
		return getDomFirstChild(Element, "http://www.collada.org/2005/11/COLLADASchema", "image" );
	}

	public org.w3c.dom.Node getAdvancedimageCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, "http://www.collada.org/2005/11/COLLADASchema", "image", curNode );
	}

	public imageType getimageValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.jmex.xml.xml.XmlException("Out of range");
		else
			return new imageType(curNode);
	}

	public imageType getimage() throws Exception 
 {
		return getimageAt(0);
	}

	public void removeimageAt(int index) {
		removeDomChildAt(Element, "http://www.collada.org/2005/11/COLLADASchema", "image", index);
	}

	public void removeimage() {
		removeimageAt(0);
	}

	public org.w3c.dom.Node addimage(imageType value) {
		return appendDomElement("http://www.collada.org/2005/11/COLLADASchema", "image", value);
	}

	public void insertimageAt(imageType value, int index) {
		insertDomElementAt("http://www.collada.org/2005/11/COLLADASchema", "image", index, value);
	}

	public void replaceimageAt(imageType value, int index) {
		replaceDomElementAt("http://www.collada.org/2005/11/COLLADASchema", "image", index, value);
	}

	public static int getnewparamMinCount() {
		return 1;
	}

	public static int getnewparamMaxCount() {
		return 1;
	}

	public int getnewparamCount() {
		return getDomChildCount(Element, "http://www.collada.org/2005/11/COLLADASchema", "newparam");
	}

	public boolean hasnewparam() {
		return hasDomChild(Element, "http://www.collada.org/2005/11/COLLADASchema", "newparam");
	}

	public common_newparam_type newnewparam() {
		return new common_newparam_type(domNode.getOwnerDocument().createElementNS("http://www.collada.org/2005/11/COLLADASchema", "newparam"));
	}

	public common_newparam_type getnewparamAt(int index) throws Exception {
		return new common_newparam_type(getDomChildAt(Element, "http://www.collada.org/2005/11/COLLADASchema", "newparam", index));
	}

	public org.w3c.dom.Node getStartingnewparamCursor() throws Exception {
		return getDomFirstChild(Element, "http://www.collada.org/2005/11/COLLADASchema", "newparam" );
	}

	public org.w3c.dom.Node getAdvancednewparamCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, "http://www.collada.org/2005/11/COLLADASchema", "newparam", curNode );
	}

	public common_newparam_type getnewparamValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.jmex.xml.xml.XmlException("Out of range");
		else
			return new common_newparam_type(curNode);
	}

	public common_newparam_type getnewparam() throws Exception 
 {
		return getnewparamAt(0);
	}

	public void removenewparamAt(int index) {
		removeDomChildAt(Element, "http://www.collada.org/2005/11/COLLADASchema", "newparam", index);
	}

	public void removenewparam() {
		removenewparamAt(0);
	}

	public org.w3c.dom.Node addnewparam(common_newparam_type value) {
		return appendDomElement("http://www.collada.org/2005/11/COLLADASchema", "newparam", value);
	}

	public void insertnewparamAt(common_newparam_type value, int index) {
		insertDomElementAt("http://www.collada.org/2005/11/COLLADASchema", "newparam", index, value);
	}

	public void replacenewparamAt(common_newparam_type value, int index) {
		replaceDomElementAt("http://www.collada.org/2005/11/COLLADASchema", "newparam", index, value);
	}

	public static int getconstantMinCount() {
		return 1;
	}

	public static int getconstantMaxCount() {
		return 1;
	}

	public int getconstantCount() {
		return getDomChildCount(Element, "http://www.collada.org/2005/11/COLLADASchema", "constant");
	}

	public boolean hasconstant() {
		return hasDomChild(Element, "http://www.collada.org/2005/11/COLLADASchema", "constant");
	}

	public constantType newconstant() {
		return new constantType(domNode.getOwnerDocument().createElementNS("http://www.collada.org/2005/11/COLLADASchema", "constant"));
	}

	public constantType getconstantAt(int index) throws Exception {
		return new constantType(getDomChildAt(Element, "http://www.collada.org/2005/11/COLLADASchema", "constant", index));
	}

	public org.w3c.dom.Node getStartingconstantCursor() throws Exception {
		return getDomFirstChild(Element, "http://www.collada.org/2005/11/COLLADASchema", "constant" );
	}

	public org.w3c.dom.Node getAdvancedconstantCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, "http://www.collada.org/2005/11/COLLADASchema", "constant", curNode );
	}

	public constantType getconstantValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.jmex.xml.xml.XmlException("Out of range");
		else
			return new constantType(curNode);
	}

	public constantType getconstant() throws Exception 
 {
		return getconstantAt(0);
	}

	public void removeconstantAt(int index) {
		removeDomChildAt(Element, "http://www.collada.org/2005/11/COLLADASchema", "constant", index);
	}

	public void removeconstant() {
		removeconstantAt(0);
	}

	public org.w3c.dom.Node addconstant(constantType value) {
		return appendDomElement("http://www.collada.org/2005/11/COLLADASchema", "constant", value);
	}

	public void insertconstantAt(constantType value, int index) {
		insertDomElementAt("http://www.collada.org/2005/11/COLLADASchema", "constant", index, value);
	}

	public void replaceconstantAt(constantType value, int index) {
		replaceDomElementAt("http://www.collada.org/2005/11/COLLADASchema", "constant", index, value);
	}

	public static int getlambertMinCount() {
		return 1;
	}

	public static int getlambertMaxCount() {
		return 1;
	}

	public int getlambertCount() {
		return getDomChildCount(Element, "http://www.collada.org/2005/11/COLLADASchema", "lambert");
	}

	public boolean haslambert() {
		return hasDomChild(Element, "http://www.collada.org/2005/11/COLLADASchema", "lambert");
	}

	public lambertType newlambert() {
		return new lambertType(domNode.getOwnerDocument().createElementNS("http://www.collada.org/2005/11/COLLADASchema", "lambert"));
	}

	public lambertType getlambertAt(int index) throws Exception {
		return new lambertType(getDomChildAt(Element, "http://www.collada.org/2005/11/COLLADASchema", "lambert", index));
	}

	public org.w3c.dom.Node getStartinglambertCursor() throws Exception {
		return getDomFirstChild(Element, "http://www.collada.org/2005/11/COLLADASchema", "lambert" );
	}

	public org.w3c.dom.Node getAdvancedlambertCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, "http://www.collada.org/2005/11/COLLADASchema", "lambert", curNode );
	}

	public lambertType getlambertValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.jmex.xml.xml.XmlException("Out of range");
		else
			return new lambertType(curNode);
	}

	public lambertType getlambert() throws Exception 
 {
		return getlambertAt(0);
	}

	public void removelambertAt(int index) {
		removeDomChildAt(Element, "http://www.collada.org/2005/11/COLLADASchema", "lambert", index);
	}

	public void removelambert() {
		removelambertAt(0);
	}

	public org.w3c.dom.Node addlambert(lambertType value) {
		return appendDomElement("http://www.collada.org/2005/11/COLLADASchema", "lambert", value);
	}

	public void insertlambertAt(lambertType value, int index) {
		insertDomElementAt("http://www.collada.org/2005/11/COLLADASchema", "lambert", index, value);
	}

	public void replacelambertAt(lambertType value, int index) {
		replaceDomElementAt("http://www.collada.org/2005/11/COLLADASchema", "lambert", index, value);
	}

	public static int getphongMinCount() {
		return 1;
	}

	public static int getphongMaxCount() {
		return 1;
	}

	public int getphongCount() {
		return getDomChildCount(Element, "http://www.collada.org/2005/11/COLLADASchema", "phong");
	}

	public boolean hasphong() {
		return hasDomChild(Element, "http://www.collada.org/2005/11/COLLADASchema", "phong");
	}

	public phongType newphong() {
		return new phongType(domNode.getOwnerDocument().createElementNS("http://www.collada.org/2005/11/COLLADASchema", "phong"));
	}

	public phongType getphongAt(int index) throws Exception {
		return new phongType(getDomChildAt(Element, "http://www.collada.org/2005/11/COLLADASchema", "phong", index));
	}

	public org.w3c.dom.Node getStartingphongCursor() throws Exception {
		return getDomFirstChild(Element, "http://www.collada.org/2005/11/COLLADASchema", "phong" );
	}

	public org.w3c.dom.Node getAdvancedphongCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, "http://www.collada.org/2005/11/COLLADASchema", "phong", curNode );
	}

	public phongType getphongValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.jmex.xml.xml.XmlException("Out of range");
		else
			return new phongType(curNode);
	}

	public phongType getphong() throws Exception 
 {
		return getphongAt(0);
	}

	public void removephongAt(int index) {
		removeDomChildAt(Element, "http://www.collada.org/2005/11/COLLADASchema", "phong", index);
	}

	public void removephong() {
		removephongAt(0);
	}

	public org.w3c.dom.Node addphong(phongType value) {
		return appendDomElement("http://www.collada.org/2005/11/COLLADASchema", "phong", value);
	}

	public void insertphongAt(phongType value, int index) {
		insertDomElementAt("http://www.collada.org/2005/11/COLLADASchema", "phong", index, value);
	}

	public void replacephongAt(phongType value, int index) {
		replaceDomElementAt("http://www.collada.org/2005/11/COLLADASchema", "phong", index, value);
	}

	public static int getblinnMinCount() {
		return 1;
	}

	public static int getblinnMaxCount() {
		return 1;
	}

	public int getblinnCount() {
		return getDomChildCount(Element, "http://www.collada.org/2005/11/COLLADASchema", "blinn");
	}

	public boolean hasblinn() {
		return hasDomChild(Element, "http://www.collada.org/2005/11/COLLADASchema", "blinn");
	}

	public blinnType newblinn() {
		return new blinnType(domNode.getOwnerDocument().createElementNS("http://www.collada.org/2005/11/COLLADASchema", "blinn"));
	}

	public blinnType getblinnAt(int index) throws Exception {
		return new blinnType(getDomChildAt(Element, "http://www.collada.org/2005/11/COLLADASchema", "blinn", index));
	}

	public org.w3c.dom.Node getStartingblinnCursor() throws Exception {
		return getDomFirstChild(Element, "http://www.collada.org/2005/11/COLLADASchema", "blinn" );
	}

	public org.w3c.dom.Node getAdvancedblinnCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, "http://www.collada.org/2005/11/COLLADASchema", "blinn", curNode );
	}

	public blinnType getblinnValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.jmex.xml.xml.XmlException("Out of range");
		else
			return new blinnType(curNode);
	}

	public blinnType getblinn() throws Exception 
 {
		return getblinnAt(0);
	}

	public void removeblinnAt(int index) {
		removeDomChildAt(Element, "http://www.collada.org/2005/11/COLLADASchema", "blinn", index);
	}

	public void removeblinn() {
		removeblinnAt(0);
	}

	public org.w3c.dom.Node addblinn(blinnType value) {
		return appendDomElement("http://www.collada.org/2005/11/COLLADASchema", "blinn", value);
	}

	public void insertblinnAt(blinnType value, int index) {
		insertDomElementAt("http://www.collada.org/2005/11/COLLADASchema", "blinn", index, value);
	}

	public void replaceblinnAt(blinnType value, int index) {
		replaceDomElementAt("http://www.collada.org/2005/11/COLLADASchema", "blinn", index, value);
	}

	public static int getextraMinCount() {
		return 0;
	}

	public static int getextraMaxCount() {
		return Integer.MAX_VALUE;
	}

	public int getextraCount() {
		return getDomChildCount(Element, "http://www.collada.org/2005/11/COLLADASchema", "extra");
	}

	public boolean hasextra() {
		return hasDomChild(Element, "http://www.collada.org/2005/11/COLLADASchema", "extra");
	}

	public extraType newextra() {
		return new extraType(domNode.getOwnerDocument().createElementNS("http://www.collada.org/2005/11/COLLADASchema", "extra"));
	}

	public extraType getextraAt(int index) throws Exception {
		return new extraType(getDomChildAt(Element, "http://www.collada.org/2005/11/COLLADASchema", "extra", index));
	}

	public org.w3c.dom.Node getStartingextraCursor() throws Exception {
		return getDomFirstChild(Element, "http://www.collada.org/2005/11/COLLADASchema", "extra" );
	}

	public org.w3c.dom.Node getAdvancedextraCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, "http://www.collada.org/2005/11/COLLADASchema", "extra", curNode );
	}

	public extraType getextraValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.jmex.xml.xml.XmlException("Out of range");
		else
			return new extraType(curNode);
	}

	public extraType getextra() throws Exception 
 {
		return getextraAt(0);
	}

	public void removeextraAt(int index) {
		removeDomChildAt(Element, "http://www.collada.org/2005/11/COLLADASchema", "extra", index);
	}

	public void removeextra() {
		while (hasextra())
			removeextraAt(0);
	}

	public org.w3c.dom.Node addextra(extraType value) {
		return appendDomElement("http://www.collada.org/2005/11/COLLADASchema", "extra", value);
	}

	public void insertextraAt(extraType value, int index) {
		insertDomElementAt("http://www.collada.org/2005/11/COLLADASchema", "extra", index, value);
	}

	public void replaceextraAt(extraType value, int index) {
		replaceDomElementAt("http://www.collada.org/2005/11/COLLADASchema", "extra", index, value);
	}

}
