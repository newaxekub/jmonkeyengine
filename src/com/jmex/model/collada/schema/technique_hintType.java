/**
 * technique_hintType.java
 *
 * This file was generated by XMLSpy 2007sp2 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSpy Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.jmex.model.collada.schema;

import com.jmex.xml.types.SchemaNCName;

public class technique_hintType extends com.jmex.xml.xml.Node {

	public technique_hintType(technique_hintType node) {
		super(node);
	}

	public technique_hintType(org.w3c.dom.Node node) {
		super(node);
	}

	public technique_hintType(org.w3c.dom.Document doc) {
		super(doc);
	}

	public technique_hintType(com.jmex.xml.xml.Document doc, String namespaceURI, String prefix, String name) {
		super(doc, namespaceURI, prefix, name);
	}
	
	public void adjustPrefix() {
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "platform" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "platform", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "profile" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "profile", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Attribute, null, "ref" );
				tmpNode != null;
				tmpNode = getDomNextChild( Attribute, null, "ref", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, false);
		}
	}
	public void setXsiType() {
 		org.w3c.dom.Element el = (org.w3c.dom.Element) domNode;
		el.setAttributeNS("http://www.w3.org/2001/XMLSchema-instance", "xsi:type", "technique_hint");
	}

	public static int getplatformMinCount() {
		return 0;
	}

	public static int getplatformMaxCount() {
		return 1;
	}

	public int getplatformCount() {
		return getDomChildCount(Attribute, null, "platform");
	}

	public boolean hasplatform() {
		return hasDomChild(Attribute, null, "platform");
	}

	public SchemaNCName newplatform() {
		return new SchemaNCName();
	}

	public SchemaNCName getplatformAt(int index) throws Exception {
		return new SchemaNCName(getDomNodeValue(getDomChildAt(Attribute, null, "platform", index)));
	}

	public org.w3c.dom.Node getStartingplatformCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "platform" );
	}

	public org.w3c.dom.Node getAdvancedplatformCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "platform", curNode );
	}

	public SchemaNCName getplatformValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.jmex.xml.xml.XmlException("Out of range");
		else
			return new SchemaNCName(getDomNodeValue(curNode));
	}

	public SchemaNCName getplatform() throws Exception 
 {
		return getplatformAt(0);
	}

	public void removeplatformAt(int index) {
		removeDomChildAt(Attribute, null, "platform", index);
	}

	public void removeplatform() {
		removeplatformAt(0);
	}

	public org.w3c.dom.Node addplatform(SchemaNCName value) {
		if( value.isNull() )
			return null;

		return  appendDomChild(Attribute, null, "platform", value.toString());
	}

	public org.w3c.dom.Node addplatform(String value) throws Exception {
		return addplatform(new SchemaNCName(value));
	}

	public void insertplatformAt(SchemaNCName value, int index) {
		insertDomChildAt(Attribute, null, "platform", index, value.toString());
	}

	public void insertplatformAt(String value, int index) throws Exception {
		insertplatformAt(new SchemaNCName(value), index);
	}

	public void replaceplatformAt(SchemaNCName value, int index) {
		replaceDomChildAt(Attribute, null, "platform", index, value.toString());
	}

	public void replaceplatformAt(String value, int index) throws Exception {
		replaceplatformAt(new SchemaNCName(value), index);
	}

	public static int getprofileMinCount() {
		return 0;
	}

	public static int getprofileMaxCount() {
		return 1;
	}

	public int getprofileCount() {
		return getDomChildCount(Attribute, null, "profile");
	}

	public boolean hasprofile() {
		return hasDomChild(Attribute, null, "profile");
	}

	public SchemaNCName newprofile() {
		return new SchemaNCName();
	}

	public SchemaNCName getprofileAt(int index) throws Exception {
		return new SchemaNCName(getDomNodeValue(getDomChildAt(Attribute, null, "profile", index)));
	}

	public org.w3c.dom.Node getStartingprofileCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "profile" );
	}

	public org.w3c.dom.Node getAdvancedprofileCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "profile", curNode );
	}

	public SchemaNCName getprofileValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.jmex.xml.xml.XmlException("Out of range");
		else
			return new SchemaNCName(getDomNodeValue(curNode));
	}

	public SchemaNCName getprofile() throws Exception 
 {
		return getprofileAt(0);
	}

	public void removeprofileAt(int index) {
		removeDomChildAt(Attribute, null, "profile", index);
	}

	public void removeprofile() {
		removeprofileAt(0);
	}

	public org.w3c.dom.Node addprofile(SchemaNCName value) {
		if( value.isNull() )
			return null;

		return  appendDomChild(Attribute, null, "profile", value.toString());
	}

	public org.w3c.dom.Node addprofile(String value) throws Exception {
		return addprofile(new SchemaNCName(value));
	}

	public void insertprofileAt(SchemaNCName value, int index) {
		insertDomChildAt(Attribute, null, "profile", index, value.toString());
	}

	public void insertprofileAt(String value, int index) throws Exception {
		insertprofileAt(new SchemaNCName(value), index);
	}

	public void replaceprofileAt(SchemaNCName value, int index) {
		replaceDomChildAt(Attribute, null, "profile", index, value.toString());
	}

	public void replaceprofileAt(String value, int index) throws Exception {
		replaceprofileAt(new SchemaNCName(value), index);
	}

	public static int getrefMinCount() {
		return 1;
	}

	public static int getrefMaxCount() {
		return 1;
	}

	public int getrefCount() {
		return getDomChildCount(Attribute, null, "ref");
	}

	public boolean hasref() {
		return hasDomChild(Attribute, null, "ref");
	}

	public SchemaNCName newref() {
		return new SchemaNCName();
	}

	public SchemaNCName getrefAt(int index) throws Exception {
		return new SchemaNCName(getDomNodeValue(getDomChildAt(Attribute, null, "ref", index)));
	}

	public org.w3c.dom.Node getStartingrefCursor() throws Exception {
		return getDomFirstChild(Attribute, null, "ref" );
	}

	public org.w3c.dom.Node getAdvancedrefCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Attribute, null, "ref", curNode );
	}

	public SchemaNCName getrefValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.jmex.xml.xml.XmlException("Out of range");
		else
			return new SchemaNCName(getDomNodeValue(curNode));
	}

	public SchemaNCName getref() throws Exception 
 {
		return getrefAt(0);
	}

	public void removerefAt(int index) {
		removeDomChildAt(Attribute, null, "ref", index);
	}

	public void removeref() {
		removerefAt(0);
	}

	public org.w3c.dom.Node addref(SchemaNCName value) {
		if( value.isNull() )
			return null;

		return  appendDomChild(Attribute, null, "ref", value.toString());
	}

	public org.w3c.dom.Node addref(String value) throws Exception {
		return addref(new SchemaNCName(value));
	}

	public void insertrefAt(SchemaNCName value, int index) {
		insertDomChildAt(Attribute, null, "ref", index, value.toString());
	}

	public void insertrefAt(String value, int index) throws Exception {
		insertrefAt(new SchemaNCName(value), index);
	}

	public void replacerefAt(SchemaNCName value, int index) {
		replaceDomChildAt(Attribute, null, "ref", index, value.toString());
	}

	public void replacerefAt(String value, int index) throws Exception {
		replacerefAt(new SchemaNCName(value), index);
	}

}
