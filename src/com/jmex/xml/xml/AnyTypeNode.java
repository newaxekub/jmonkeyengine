/**
 * AnyTypeNode.java
 *
 * This file was generated by XMLSpy 2007sp2 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSpy Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.jmex.xml.xml;

import com.jmex.xml.types.SchemaString;
import com.jmex.xml.types.SchemaType;

public class AnyTypeNode extends Node {

	public AnyTypeNode(AnyTypeNode node) {
		super(node);
	}

	public AnyTypeNode(org.w3c.dom.Node node) {
		super(node);
	}

	public AnyTypeNode(org.w3c.dom.Document doc) {
		super(doc);
	}

	public AnyTypeNode(Document doc, String namespaceURI, String prefix, String name) {
		super(doc, namespaceURI, prefix, name);
	}
	
	public SchemaString getValue() {
		return new SchemaString(getDomNodeValue(dereference(domNode)));
		// TODO this should be: return new SchemaString(getDomNodeValue(domNode));
	}

	public void setValue(SchemaType value) {
		setDomNodeValue(domNode, value.toString());
	}

	public void assign(SchemaType value) {
		setValue(value);
	}
	
	public org.w3c.dom.Node getFirstChildElement(String namespaceURI, String name ) {
		return getDomFirstChild(com.jmex.xml.xml.Node.Element,  namespaceURI, name );
	}
	
	public org.w3c.dom.Node getNextChildElement(String namespaceURI, String name, org.w3c.dom.Node childNode ) {
		return getDomNextChild(com.jmex.xml.xml.Node.Element, namespaceURI, name, childNode);
	}
	
	public void appendChildElement(String namespaceURI, String name, com.jmex.xml.xml.Node node) throws Exception {
		if (node.getDomNode().getNodeType() != org.w3c.dom.Node.ELEMENT_NODE)
			throw new XmlException("appendChildElement: Node is not an element");

		//domNode.appendChild(cloneDomElementAs(namespaceURI, name, node));or
		domNode.appendChild(node.getDomNode());
	}
	
	public org.w3c.dom.Node createNewChildElement(String namespaceURI, String name) {
		org.w3c.dom.Element newDomNode = domNode.getOwnerDocument().createElementNS(namespaceURI, name);
		domNode.appendChild(newDomNode);
		return newDomNode;
	}
	
	public org.w3c.dom.Node appendChildElement(String namespaceURI, String name, String value) {
		return appendDomChild(com.jmex.xml.xml.Node.Element, namespaceURI, name, value);
	}
	
	/*
	public org.w3c.dom.Node appendChildElement(String namespaceURI, String name, String type, String value) {
		org.w3c.dom.Element domElement = (org.w3c.dom.Element)appendDomChild(com.jmex.xml.xml.Node.Element, namespaceURI, name, value);
		domElement.setAttributeNS("http://www.w3.org/2001/XMLSchema-instance", "xsi:type", type);
	} */
	
	public void adjustPrefix() {
	}
	
	public void addTextNode(String value) throws Exception {
		appendDomChild(Text, null, null, value.toString());
	}
	
	public void addComment(String value) throws Exception {
			appendDomChild(Comment, null, null, value.toString());
	}
		
	public void addCDataNode(String value) throws Exception {
			appendDomChild(CData, null, null, value.toString());
	}
	
	public void addProcessingInstruction(String name, String value) throws Exception {
			appendDomChild(ProcessingInstruction, null, name.toString(), value.toString());
	}
}
