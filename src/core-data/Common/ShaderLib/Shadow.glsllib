#ifdef NO_SHADOW2DPROJ
#define SHADOWMAP sampler2D
#define SHADOWTEX texture2D
#define SHADCOORD(coord) coord.xy
#else
#define SHADOWMAP sampler2DShadow
#define SHADOWTEX shadow2D
#define SHADCOORD(coord) vec3(coord.xy,0.0)
#endif

//float shadowDepth = texture2DProj(tex, projCoord);

const float texSize = 1024.0;
const float pixSize = 1.0 / texSize;
const vec2 pixSize2 = vec2(pixSize);

float Shadow_DoShadowCompareOffset(in SHADOWMAP tex, vec4 projCoord, vec2 offset){
     return step(projCoord.z, SHADOWTEX(tex, SHADCOORD(projCoord.xy + offset * pixSize2)).r);
}

float Shadow_DoShadowCompare(in SHADOWMAP tex, vec4 projCoord){
    return step(projCoord.z, SHADOWTEX(tex, SHADCOORD(projCoord.xy)).r);
}

float Shadow_BorderCheck(in vec2 coord){
    // Very slow method (uses 24 instructions)
    //if (coord.x >= 1.0)
    //    return 1.0;
    //else if (coord.x <= 0.0)
    //    return 1.0;
    //else if (coord.y >= 1.0)
    //    return 1.0;
    //else if (coord.y <= 0.0)
    //    return 1.0;
    //else
    //    return 0.0;

    // Fastest, "hack" method (uses 4-5 instructions)
    vec4 t = vec4(coord.xy, 0.0, 1.0);
    t = step(t.wwxy, t.xyzz);
    return dot(t,t);
}

float Shadow_DoDither_2x2_deprecated(in SHADOWMAP tex, in vec4 projCoord){
   vec2 offset = fract(gl_FragCoord.xy * vec2(0.5));
   //offset = step(vec2(0.25), offset);
   if (offset.x > 0.25 && offset.y > 0.25)
       offset = vec2(1.0);
   //float useOne = step(1.5, step(offset.x, 0.25) + step(offset.y, 0.25));
   //offset = max(offset, vec2(useOne));

   offset.y += offset.x;  // y ^= x in floating point
   offset.y = step(offset.y, 1.1) * offset.y;
   //if (offset.y > 1.1)
   //    offset.y = 0.0;

   return     (Shadow_DoShadowCompareOffset(tex, projCoord, offset +
                             vec2(-1.5, 0.5)) +
               Shadow_DoShadowCompareOffset(tex, projCoord, offset +
                             vec2(0.5, 0.5)) +
               Shadow_DoShadowCompareOffset(tex, projCoord, offset +
                             vec2(-1.5, -1.5)) +
               Shadow_DoShadowCompareOffset(tex, projCoord, offset +
                             vec2(0.5, -1.5)) ) * 0.25;

}

float Shadow_DoDither_2x2(in SHADOWMAP tex, in vec4 projCoord){
    float shadow = 0.0;
    vec2 o = mod(floor(gl_FragCoord.xy), 2.0);
    shadow += Shadow_DoShadowCompareOffset(tex,projCoord,vec2(-1.5, 1.5) + o);
    shadow += Shadow_DoShadowCompareOffset(tex,projCoord,vec2( 0.5, 1.5) + o);
    shadow += Shadow_DoShadowCompareOffset(tex,projCoord,vec2(-1.5, -0.5) + o);
    shadow += Shadow_DoShadowCompareOffset(tex,projCoord,vec2( 0.5, -0.5) + o);
    shadow *= 0.25 ;
    return shadow;
}

float Shadow_DoPCF_2x2(in SHADOWMAP tex, in vec4 projCoord){

    float shadow = 0.0;
    float x,y;
    for (y = -1.5 ; y <=1.5 ; y+=1.0)
            for (x = -1.5 ; x <=1.5 ; x+=1.0)
                    shadow += Shadow_DoShadowCompareOffset(tex,projCoord,vec2(x,y));

    shadow /= 16.0 ;
    return shadow;
}


float Shadow_GetShadow(in SHADOWMAP tex, in vec4 projCoord){
    return Shadow_DoDither_2x2(tex, projCoord) ;//+ Shadow_BorderCheck(projCoord.xy);
}


