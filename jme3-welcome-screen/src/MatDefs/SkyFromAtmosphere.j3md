MaterialDef SkyFromAtmosphere {

    MaterialParameters {
        Vector3 v3CameraPos;        // The camera's current position
        Vector3 v3LightPos;         // The light's current position
        Vector3 v3InvWavelength;    // 1 / pow(wavelength, 4) for the red, green, and blue channels
        Float fCameraHeight;        // The camera's current height
        Float fCameraHeight2;       // fCameraHeight^2
        Float fOuterRadius;         // The outer (atmosphere) radius
        Float fOuterRadius2;        // fOuterRadius^2
        Float fInnerRadius;         // The inner (planetary) radius
        Float fInnerRadius2;        // fInnerRadius^2
        Float fKrESun;              // Kr * ESun
        Float fKmESun;              // Km * ESun
        Float fKr4PI;               // Kr * 4 * PI
        Float fKm4PI;               // Km * 4 * PI
        Float fScale;               // 1 / (fOuterRadius - fInnerRadius)
        Float fScaleDepth;          // The scale depth (i.e. the altitude at which the atmosphere's average density is found)
        Float fScaleOverScaleDepth; // fScale / fScaleDepth

        Int nSamples;
        Float fSamples;

        Float fExposure;
        Float fg;
        Float fg2;
    }

    Technique {
        VertexShader GLSL110:   MatDefs/SkyFromAtmosphere.vert
        FragmentShader GLSL110: MatDefs/SkyFromAtmosphere.frag

        WorldParameters {
            WorldViewProjectionMatrix
            WorldMatrix
            NormalMatrix
            Position
        }
    }

}
